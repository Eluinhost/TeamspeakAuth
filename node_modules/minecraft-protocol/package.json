{
  "name": "minecraft-protocol",
  "version": "0.12.1",
  "description": "Parse and serialize minecraft packets, plus authentication and encryption.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/andrewrk/node-minecraft-protocol.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "keywords": [
    "minecraft",
    "protocol",
    "parse",
    "serialize",
    "packet",
    "authentication",
    "encrypton",
    "bot"
  ],
  "author": {
    "name": "Andrew Kelley"
  },
  "license": "BSD",
  "engines": {
    "node": ">=0.8.16"
  },
  "devDependencies": {
    "mocha": "~1.8.2",
    "mkdirp": "~0.3.4",
    "rimraf": "~2.1.1",
    "zfill": "0.0.1",
    "batch": "~0.3.1"
  },
  "dependencies": {
    "ursa": "~0.8.0",
    "superagent": "~0.10.0",
    "buffer-equal": "0.0.0",
    "ansi-color": "0.2.1",
    "node-uuid": "~1.4.1"
  },
  "readme": "# minecraft protocol [![NPM version](https://badge.fury.io/js/minecraft-protocol.png)](http://badge.fury.io/js/minecraft-protocol)\r\n\r\nParse and serialize minecraft packets, plus authentication and encryption.\r\n\r\n## Features\r\n\r\n * Supports Minecraft version 1.7.6\r\n * Parses all packets and emits events with packet fields as JavaScript\r\n   objects.\r\n * Send a packet by supplying fields as a JavaScript object.\r\n * Client\r\n   - Authenticating and logging in\r\n   - Encryption on and encryption off\r\n   - Both online and offline mode\r\n   - Respond to keep-alive packets.\r\n   - Ping a server for status\r\n * Server\r\n   - Offline mode\r\n   - Encryption and online mode\r\n   - Handshake\r\n   - Keep-alive checking\r\n   - Ping status\r\n * Robust test coverage. See Test Coverage section below.\r\n * Optimized for rapidly staying up to date with Minecraft protocol updates.\r\n\r\n## Projects Using node-minecraft-protocol\r\n\r\n * [mineflayer](https://github.com/andrewrk/mineflayer/) - create minecraft\r\n   bots with a stable, high level API.\r\n * [mcserve](https://github.com/andrewrk/mcserve) - runs and monitors your\r\n   minecraft server, provides real-time web interface, allow your users to\r\n   create bots.\r\n\r\n## Usage\r\n\r\n### Echo client example\r\n\r\n```js\r\nvar mc = require('minecraft-protocol');\r\nvar client = mc.createClient({\r\n  host: \"localhost\",   // optional\r\n  port: 25565,         // optional\r\n  username: \"email@example.com\",\r\n  password: \"12345678\",\r\n});\r\nclient.on('chat', function(packet) {\r\n  // Listen for chat messages and echo them back.\r\n  var jsonMsg = JSON.parse(packet.message);\r\n  if (jsonMsg.translate == 'chat.type.announcement' || jsonMsg.translate == 'chat.type.text') {\r\n    var username = jsonMsg.using[0];\r\n    var msg = jsonMsg.using[1];\r\n    if (username === client.username) return;\r\n    client.write(0x03, {\r\n      message: msg\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nIf the server is in offline mode, you may leave out the `password` option.\r\n\r\n### Hello World server example\r\n\r\n```js\r\nvar mc = require('minecraft-protocol');\r\nvar server = mc.createServer({\r\n  'online-mode': true,   // optional\r\n  encryption: true,      // optional\r\n  host: '0.0.0.0',       // optional\r\n  port: 25565,           // optional\r\n});\r\nserver.on('login', function(client) {\r\n  client.write('login', {\r\n    entityId: client.id,\r\n    levelType: 'default',\r\n    gameMode: 0,\r\n    dimension: 0,\r\n    difficulty: 2,\r\n    maxPlayers: server.maxPlayers\r\n  });\r\n  client.write('position', {\r\n    x: 0,\r\n    y: 1.62,\r\n    z: 0,\r\n    yaw: 0,\r\n    pitch: 0,\r\n    onGround: true\r\n  });\r\n  var msg = { translate: 'chat.type.announcement', using: [\r\n    'Server',\r\n    'Hello, ' + client.username\r\n  ]};\r\n  client.write(0x03, { message: JSON.stringify(msg) });\r\n});\r\n```\r\n\r\n## Installation\r\n\r\n### Linux\r\n\r\n`npm install minecraft-protocol`\r\n\r\n### Windows\r\n\r\n * Follow the Windows instructions from [Obvious/ursa](https://github.com/Obvious/ursa)\r\n * `npm install minecraft-protocol`\r\n\r\n## Documentation\r\n\r\n### mc.ping(options, callback)\r\n\r\n`callback(err, pingResults)`\r\n\r\n`pingResults`:\r\n\r\n * `prefix`\r\n * `protocol`\r\n * `version`\r\n * `motd`\r\n * `playerCount`\r\n * `maxPlayers`\r\n\r\n### mc.createServer(options)\r\n\r\nReturns a `Server` instance and starts listening.\r\n\r\n### Server\r\n\r\n#### server.onlineModeExceptions\r\n\r\nThis is a plain old JavaScript object. Add a key with the username you want to\r\nbe exempt from online mode or offline mode (whatever mode the server is in).\r\n\r\nMake sure the entries in this object are all lower case.\r\n\r\n#### server.clients\r\n\r\nJavascript object mapping a `Client` from a clientId.\r\n\r\n### server.playerCount\r\n\r\nThe amount of players currently present on the server.\r\n\r\n#### server.maxPlayers\r\n\r\nThe maximum amount of players allowed on the server.\r\n\r\n#### server.motd\r\n\r\nThe motd that is sent to the player when he is pinging the server\r\n\r\n#### server.favicon\r\n\r\nA base64 data string representing the favicon that will appear next to the server\r\non the mojang client's multiplayer list.\r\n\r\n### mc.createClient(option)\r\n\r\nReturns a `Client` instance and perform login\r\n\r\n### Client\r\n\r\n#### client.state\r\n\r\nThe internal state that is used to figure out which protocol state we are in during\r\npacket parsing. This is one of the protocol.states.\r\n\r\n#### client.isServer\r\n\r\nTrue if this is a connection going from the server to the client,\r\nFalse if it is a connection from client to server.\r\n\r\n\r\n#### client.socket\r\n\r\nReturns the internal nodejs Socket used to communicate with this client.\r\n\r\n#### client.uuid\r\n\r\nA string representation of the client's UUID. Note that UUIDs are unique for\r\neach players, while playerNames, as of 1.7.7, are not unique and can change.\r\n\r\n### client.username\r\n\r\nThe user's username.\r\n\r\n### client.session\r\n\r\nThe user's session, as returned by the Yggdrasil system. \r\n\r\n### Not Immediately Obvious Data Type Formats\r\n\r\nNote : almost all data formats can be understood by looking at the packet \r\nstructure in lib/protocol.js\r\n\r\n#### entityMetadata\r\n\r\nValue looks like this:\r\n\r\n```js\r\n[\r\n  {type: 'slot', value: slot, key: 3},\r\n  {type: 'int', value: value, key: 4},\r\n  ...\r\n]\r\n```\r\n\r\nWhere the key is the numeric metadata key and the value is the value of the \r\ncorrect data type.\r\n\r\n## Testing\r\n\r\n* Ensure your system has the `java` executable in `PATH`.\r\n* Download the appropriate version of `minecraft_server.jar`.\r\n* `MC_SERVER_JAR=path/to/minecraft_server.jar MC_USERNAME=email@example.com MC_PASSWORD=password npm test`\r\n\r\n### Test Coverage\r\n\r\n```\r\n  packets\r\n    √ handshaking,ServerBound,0x00\r\n    √ status,ServerBound,0x00\r\n    √ status,ServerBound,0x01\r\n    √ status,ClientBound,0x00\r\n    √ status,ClientBound,0x01\r\n    √ login,ServerBound,0x00\r\n    √ login,ServerBound,0x01\r\n    √ login,ClientBound,0x00\r\n    √ login,ClientBound,0x01\r\n    √ login,ClientBound,0x02\r\n    √ play,ServerBound,0x00\r\n    √ play,ServerBound,0x01\r\n    √ play,ServerBound,0x02\r\n    √ play,ServerBound,0x03\r\n    √ play,ServerBound,0x04\r\n    √ play,ServerBound,0x05\r\n    √ play,ServerBound,0x06\r\n    √ play,ServerBound,0x07\r\n    √ play,ServerBound,0x08\r\n    √ play,ServerBound,0x09\r\n    √ play,ServerBound,0x0a\r\n    √ play,ServerBound,0x0b\r\n    √ play,ServerBound,0x0c\r\n    √ play,ServerBound,0x0d\r\n    √ play,ServerBound,0x0e\r\n    √ play,ServerBound,0x0f\r\n    √ play,ServerBound,0x10\r\n    √ play,ServerBound,0x11\r\n    √ play,ServerBound,0x12\r\n    √ play,ServerBound,0x13\r\n    √ play,ServerBound,0x14\r\n    √ play,ServerBound,0x15\r\n    √ play,ServerBound,0x16\r\n    √ play,ServerBound,0x17\r\n    √ play,ClientBound,0x00\r\n    √ play,ClientBound,0x01\r\n    √ play,ClientBound,0x02\r\n    √ play,ClientBound,0x03\r\n    √ play,ClientBound,0x04\r\n    √ play,ClientBound,0x05\r\n    √ play,ClientBound,0x06\r\n    √ play,ClientBound,0x07\r\n    √ play,ClientBound,0x08\r\n    √ play,ClientBound,0x09\r\n    √ play,ClientBound,0x0a\r\n    √ play,ClientBound,0x0b\r\n    √ play,ClientBound,0x0c\r\n    √ play,ClientBound,0x0d\r\n    √ play,ClientBound,0x0e\r\n    √ play,ClientBound,0x0f\r\n    √ play,ClientBound,0x10\r\n    √ play,ClientBound,0x11\r\n    √ play,ClientBound,0x12\r\n    √ play,ClientBound,0x13\r\n    √ play,ClientBound,0x14\r\n    √ play,ClientBound,0x15\r\n    √ play,ClientBound,0x16\r\n    √ play,ClientBound,0x17\r\n    √ play,ClientBound,0x18\r\n    √ play,ClientBound,0x19\r\n    √ play,ClientBound,0x1a\r\n    √ play,ClientBound,0x1b\r\n    √ play,ClientBound,0x1c\r\n    √ play,ClientBound,0x1d\r\n    √ play,ClientBound,0x1e\r\n    √ play,ClientBound,0x1f\r\n    √ play,ClientBound,0x20\r\n    √ play,ClientBound,0x21\r\n    √ play,ClientBound,0x22\r\n    √ play,ClientBound,0x23\r\n    √ play,ClientBound,0x24\r\n    √ play,ClientBound,0x25\r\n    √ play,ClientBound,0x26\r\n    √ play,ClientBound,0x27\r\n    √ play,ClientBound,0x28\r\n    √ play,ClientBound,0x29\r\n    √ play,ClientBound,0x2a\r\n    √ play,ClientBound,0x2b\r\n    √ play,ClientBound,0x2c\r\n    √ play,ClientBound,0x2d\r\n    √ play,ClientBound,0x2e\r\n    √ play,ClientBound,0x2f\r\n    √ play,ClientBound,0x30\r\n    √ play,ClientBound,0x31\r\n    √ play,ClientBound,0x32\r\n    √ play,ClientBound,0x33\r\n    √ play,ClientBound,0x34\r\n    √ play,ClientBound,0x35\r\n    √ play,ClientBound,0x36\r\n    √ play,ClientBound,0x37\r\n    √ play,ClientBound,0x38\r\n    √ play,ClientBound,0x39\r\n    √ play,ClientBound,0x3a\r\n    √ play,ClientBound,0x3b\r\n    √ play,ClientBound,0x3c\r\n    √ play,ClientBound,0x3d\r\n    √ play,ClientBound,0x3e\r\n    √ play,ClientBound,0x3f\r\n    √ play,ClientBound,0x40\r\n\r\n  client\r\n    √ pings the server (32734ms)\r\n    √ connects successfully - online mode (23367ms)\r\n    √ connects successfully - offline mode (10261ms)\r\n    √ gets kicked when no credentials supplied in online mode (18400ms)\r\n    √ does not crash for 10000ms (24780ms)\r\n\r\n  mc-server\r\n    √ starts listening and shuts down cleanly (73ms)\r\n    √ kicks clients that do not log in (295ms)\r\n    √ kicks clients that do not send keepalive packets (266ms)\r\n    √ responds to ping requests (168ms)\r\n    √ clients can log in and chat (158ms)\r\n    √ kicks clients when invalid credentials (680ms)\r\n    √ gives correct reason for kicking clients when shutting down (123ms)\r\n\r\n\r\n  111 tests complete (3 minutes)\r\n```\r\n\r\n# Debugging\r\n\r\nYou can enable some protocol debugging output using `NODE_DEBUG` environment variable:\r\n\r\n```bash\r\nNODE_DEBUG=\"minecraft-protocol\" node [...]\r\n```\r\n\r\n## History\r\n### 0.12.1\r\n\r\n * Updated protocol version to support 1.7.6\r\n\r\n### 0.12.0\r\n \r\n * Updated protocol version to support 1.7.2\r\n * Overhaul the serializer backend to be more general-purpose and future-proof.\r\n * Support listening packets by name (thanks [deathcap](https://github.com/deathcap))\r\n * Support reading/writing a raw buffer to the socket.\r\n\r\n### 0.11.6\r\n\r\n * Updated protocol version to support 1.6.4 (thanks [Matt Bell](https://github.com/mappum))\r\n\r\n### 0.11.5\r\n\r\n * Fix handling of some conditional fields (thanks [Florian Wesch](https://github.com/dividuum))\r\n\r\n### 0.11.4\r\n\r\n * Chat packet string max length fix (thanks [Robin Lambertz](https://github.com/roblabla))\r\n\r\n### 0.11.3\r\n\r\n * packet 0x2c: packet writing fixed, UUID format simplified, tests updated\r\n\r\n### 0.11.2\r\n\r\n * 1.6.2 support fixes: updated 0x2c packets to include `elementList` and added 0x85 *Tile Editor Open* packets\r\n\r\n### 0.11.1\r\n\r\n * support minecraft protocol 1.6.2 / protocol version 74 (thanks [Matt Bell](https://github.com/mappum))\r\n\r\n### 0.11.0\r\n\r\n * support minecraft protocol 1.6.1 / protocol version 73 (thanks [Matt Bell](https://github.com/mappum))\r\n   * *note:* chat packets have a new format (see [the examples](https://github.com/andrewrk/node-minecraft-protocol/tree/master/examples) for how to upgrade).\r\n\r\n### 0.10.1\r\n\r\n * support minecraft protocol 1.5.2 / protocol version 61\r\n\r\n### 0.10.0\r\n\r\n * Added SRV record support when connecting to a server (thanks [Matt Stith](https://github.com/stith))\r\n * 0x66: `shift` renamed to `mode` and changed from bool to byte\r\n\r\n### 0.9.0\r\n\r\n * 0xce: create changed from bool to byte (thanks [Robin Lambertz](https://github.com/roblabla))\r\n\r\n### 0.8.1\r\n\r\n * fix buffer length checking bug in readSlot() (thanks [Xabier de Zuazo](https://github.com/zuazo))\r\n * fix C2 calculation bug (fixed #35) (thanks [Xabier de Zuazo](https://github.com/zuazo))\r\n * fix oob Buffer at readEntityMetadata (fixed #40) (thanks [Xabier de Zuazo](https://github.com/zuazo))\r\n\r\n### 0.8.0\r\n\r\n * fix remaining bugs for 1.5.1 protocol (thanks [Xabier de Zuazo](https://github.com/zuazo))\r\n * writing packets is 6% faster (thanks [Matt Bell](https://github.com/mappum))\r\n\r\n### 0.7.9\r\n\r\n * support minecraft protocol 1.5 / protocol version 60 (thanks [Matt Bell](https://github.com/mappum))\r\n\r\n### 0.7.8\r\n\r\n * server: ability to change `motd` and `maxPlayers`\r\n * server: fix incorrect `playerCount`\r\n\r\n### 0.7.7\r\n\r\n * server: fix crash when client disconnects quickly\r\n\r\n### 0.7.6\r\n\r\n * onlineModeExceptions are all lowercase now. fixes security hole.\r\n\r\n### 0.7.5\r\n\r\n * server: add `onlineModeExceptions`. When server is in:\r\n   - online mode: these usernames are exempt from online mode.\r\n   - offline mode: these usernames must authenticate.\r\n\r\n### 0.7.4\r\n\r\n * server: online mode: don't log in client until username verification\r\n\r\n### 0.7.3\r\n\r\n * revert removing socket delays to reduce latency as it was causing\r\n   errors and test failures.\r\n * server: Client now emits more predictable 'end' events.\r\n\r\n### 0.7.2\r\n\r\n * fix objectData writer. This fixes sending an 0x17 packet.\r\n\r\n### 0.7.1\r\n\r\n * remove socket delays to reduce latency. (thanks [Matt Bell](https://github.com/mappum))\r\n\r\n### 0.7.0\r\n\r\n * `createServer`: rename `encryption-enabled` option to `encryption` to stay\r\n   consistent with the examples. (thanks [Robin Lambertz](https://github.com/roblabla))\r\n * `createClient`: don't require both `email` and `username`.\r\n   - The `username` and `password` arguments are used to authenticate with the\r\n     official minecraft servers and determine the case-correct username. If\r\n     you have migrated your user account to a mojang login, `username` looks\r\n     like an email address.\r\n   - If you leave out the `password` argument, `username` is used to connect\r\n     directly to the server. In this case you will get kicked if the server is\r\n     in online mode.\r\n\r\n### 0.6.7\r\n\r\nEmit 'error' event instead of crashing when other computers abuse the\r\nminecraft protocol.\r\n\r\nBig thanks to [Robin Lambertz](https://github.com/roblabla) for this release.\r\n\r\n### 0.6.6\r\n\r\n * ping: fix calling callback twice when server sends kick\r\n * server: send a kick packet when kicking clients. (thanks [Robin Lambertz](https://github.com/roblabla))\r\n * ping: include latency property (thanks [Jan Buschtöns](https://github.com/silvinci))\r\n\r\n### 0.6.5\r\n\r\n * createServer: allow empty options\r\n * server: support online mode and encryption (thanks [Robin Lambertz](https://github.com/roblabla))\r\n\r\n### 0.6.4\r\n\r\n * Allow minecraft username instead of mojang email. (thanks [Robin Lambertz](https://github.com/roblabla))\r\n\r\n### 0.6.3\r\n\r\n * y values when only 1 byte are always unsigned\r\n\r\n### 0.6.2\r\n\r\n * 0x0e: change face to unsigned byte\r\n\r\n### 0.6.1\r\n\r\n * 0x0d: fix incorrectly swapped stance and y\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andrewrk/node-minecraft-protocol/issues"
  },
  "homepage": "https://github.com/andrewrk/node-minecraft-protocol",
  "_id": "minecraft-protocol@0.12.1",
  "_shasum": "071213572d657157f611b350b61cddb9a4519001",
  "_from": "minecraft-protocol@0.12.1",
  "_resolved": "https://registry.npmjs.org/minecraft-protocol/-/minecraft-protocol-0.12.1.tgz"
}
